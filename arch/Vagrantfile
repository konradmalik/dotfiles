API_VERSION = "2"
GUEST_SHARED_PATH = "/vagrant"
GUEST_HOME = "/home/vagrant"
HOST_SHARED_PATH = ENV["HOME"]
box = "archlinux/archlinux"
box_version = "20211101.38317"
hostname = "devarch"
ip = "192.168.56.56" # must be 10.0.0.0/8 192.168.0.0/16

cpus = 1
memory = 2048
disk_size = "150GB"
gui = true # disable during provisioning, enable later if wanted

Vagrant.configure(API_VERSION) do |config|
  config.vm.box = box
  config.vm.box_version = box_version
  config.vm.hostname = hostname

  # networking
  config.vm.network "private_network", ip: ip
  config.ssh.forward_agent = true
  # fixes error with ssh after provisioning
  config.ssh.username = "vagrant"
  config.ssh.password = "vagrant"

  # files syncing
  config.vm.synced_folder HOST_SHARED_PATH, GUEST_SHARED_PATH

  # force disk size
  unless Vagrant.has_plugin?("vagrant-disksize")
    system "vagrant plugin install vagrant-disksize"
  end
  config.disksize.size = disk_size

  config.vm.provider :vmware_desktop do |v|
    v.gui = gui
    v.vmx['memsize'] = memory
    v.vmx['numvcpus'] = cpus
  end

  config.vm.provider :virtualbox do |vb|
    vb.name = hostname
    vb.memory = memory
    vb.cpus = cpus
    vb.gui = gui
    # video
    vb.customize ["modifyvm", :id, "--vram", "64"]
    vb.customize ["modifyvm", :id, "--accelerate3d", "on"]
    vb.customize ["modifyvm", :id, "--graphicscontroller", "vmsvga"]
    # don't need audio
    vb.customize ["modifyvm", :id, "--audio", "none"]
    # shared clipboard
    vb.customize ['modifyvm', :id, '--clipboard', 'bidirectional']
    vb.customize ['modifyvm', :id, '--draganddrop', 'bidirectional']
  end

  config.vm.provider :libvirt do |lv|
    lv.cpu_mode = "host-model"
    lv.memory = memory
    lv.cpus = cpus
    lv.default_prefix = hostname
  end


  # provisioning
  # Disable swap for each vm
  config.vm.provision "shell", inline: "swapoff -a"
  # copy our repo to the correct place (dont use file provisioner as its... not very good)
  config.vm.provision "shell" do |s|
    s.inline = "mkdir -p ~/Code && cp -a " + GUEST_SHARED_PATH + "/Code/dotfiles ~/Code/dotfiles"
    s.privileged = false
  end
  # main provisioning
  config.vm.provision "ansible_local" do |ansible|
    ansible.playbook = GUEST_HOME + "/Code/dotfiles/ansible/playbook.yml"
    ansible.inventory_path = GUEST_HOME + "/Code/dotfiles/ansible/inventory.yaml"
    ansible.limit  = "local"
    # enables alacritty, vscode etc.
    ansible.extra_vars  = { gui_apps: true }
    ansible.provisioning_path = GUEST_HOME
    # set this just to force running galaxy
    ansible.galaxy_role_file = GUEST_HOME + "/Code/dotfiles/ansible/requirements.yml"
    ansible.galaxy_command = "ansible-galaxy collection install -r " + GUEST_HOME + "/Code/dotfiles/ansible/requirements.yml --force"
  end
  # gui stuff, arch specific
  $gui_script = <<-'SCRIPT'
  echo "installing gui apps"
  yay -S --sudoloop --answerdiff=None --noconfirm --removemake --devel --nocleanmenu --nodiffmenu --noeditmenu --noupgrademenu \
  xorg-xinit xorg-server xclip i3
  echo "exec i3" > ~/.xinitrc
  SCRIPT
  config.vm.provision "shell" do |s|
    s.inline = $gui_script
    s.privileged = false
  end

end

