# ZSH paths to be used in functions
if [ "$(uname)" = "Darwin" ]; then
    export ZSH_VENDOR_COMPLETIONS="$BREW_PREFIX/share/zsh/site-functions"
elif [ "$(uname)" = "Linux" ]; then
	if [ -f "/etc/arch-release" ]; then
        export ZSH_VENDOR_COMPLETIONS='/usr/share/zsh/site-functions'
	elif [ -f "/etc/debian_version" ]; then
        export ZSH_VENDOR_COMPLETIONS='/usr/share/zsh/vendor-completions'
	fi
fi

zsh_add_file() {
    [ -f "$ZDOTDIR/$1" ] && source "$ZDOTDIR/$1"
}

zsh_add_plugin() {
    PLUGIN_NAME=$(echo $1 | cut -d "/" -f 2)
    if [ -d "$ZDOTDIR/remote/$PLUGIN_NAME" ]; then
        # For plugins
        zsh_add_file "remote/$PLUGIN_NAME/$PLUGIN_NAME.plugin.zsh" || \
        zsh_add_file "remote/$PLUGIN_NAME/$PLUGIN_NAME.zsh"
    else
        git clone "https://github.com/$1.git" "$ZDOTDIR/remote/$PLUGIN_NAME"
    fi
}

zfunc_completions_helper() {
    local generate_command="$1"
    local completions_filename="$2"
    local zfunc="$ZDOTDIR/zfunc"

    if [ ! -f $ZSH_VENDOR_COMPLETIONS/$completions_filename ]; then
        # keep || true in case some of these programs are not in path (fail gracefully)
        mkdir -p "$zfunc"
        eval "$generate_command" > "${zfunc}/$completions_filename" || true
    else
        # remove if exists locally because it is already provided by package manager
        rm -f "${zfunc}/$completions_filename"
    fi
}

# custom autocompletion
# generate functions and store them for autoload by zsh
generate_completions() {
    # python
    zfunc_completions_helper "pip3 completion --zsh" _pip3
    zfunc_completions_helper "poetry completions zsh" _poetry
    # rust
    zfunc_completions_helper "rustup completions zsh" _rustup
    zfunc_completions_helper "rustup completions zsh cargo" _cargo
    # kubernetes
    zfunc_completions_helper "kubectl completion zsh" _kubectl
    zfunc_completions_helper "helm completion zsh" _helm
    zfunc_completions_helper "k3d completion zsh" _k3d
    zfunc_completions_helper "kind completion zsh" _kind
    zfunc_completions_helper "flux completion zsh" _flux
    # earthly
    zfunc_completions_helper "earthly bootstrap --source zsh" _earthly
    # force compinit
    rm -f "$ZDOTDIR/.zcompdump"
    echo "completions generated; you may need to restart your shell"
}

load_bash_completions() {
    # specific bash-completions need to be called here
    if command -v pipx &>/dev/null; then
        if [ "$(uname)" = "Darwin" ]; then
            source "$BREW_PREFIX/etc/bash_completion.d/pipx"
        elif [ "$(uname)" = "Linux" ]; then
            eval "$(register-python-argcomplete pipx)"
        fi
    fi
    if command -v az &>/dev/null; then
        if [ "$(uname)" = "Darwin" ]; then
            source "$BREW_PREFIX/etc/bash_completion.d/az"
        elif [ "$(uname)" = "Linux" ]; then
            if [ -f "/etc/arch-release" ]; then
                source "/usr/share/bash-completion/completions/az"
            elif [ -f "/etc/debian_version" ]; then
                source "/etc/bash_completion.d/azure-cli"
            fi
        fi
    fi
}


weather() {
    local param="$1"
    if [ -z "$param" ]; then
        curl "wttr.in/?F"
    else
        curl "wttr.in/${param}?F"
    fi
}

timezsh() {
  local shell=${1-$SHELL}
  for i in $(seq 1 10); do time $shell -i -c exit; done
}

# fix for tmux ssh socket
fix_ssh_auth_sock() {
    # (On) reverses globbing order
    # https://unix.stackexchange.com/a/27400
    for tsock in /tmp/ssh*/agent*(On); do
        if [ -O "$tsock" ]; then
            sock=$tsock
            break
        fi
    done
    if [ -n "$sock" ]; then
        export SSH_AUTH_SOCK="$sock"
        echo "New socket: $sock"
    else
        echo "Could not find appropriate socket :("
        unset SSH_AUTH_SOCK
    fi
}

# magic to prune local branches that are not on remote
git-prune-local-branches() {
    git branch -r | awk '{print $1}' | egrep -v -f /dev/fd/0 <(git branch -vv | grep origin) | awk '{print $1}' | xargs git branch -d
}

# update all cargo-installed binaries
cargo-update-binaries() {
    cargo install $(cargo install --list | egrep '^[a-z0-9_-]+ v[0-9.]+:$' | cut -f1 -d' ')
}

# update functions
if [ "$(uname)" = "Darwin" ]; then
    mac-upgrade() {
        brew update && \
        brew upgrade && \
        brew upgrade --cask
        # try to upgrade cargo stuff
        cargo-update-binaries
        generate_completions
    }
    mac-clean() {
        brew cleanup
    }
elif [ "$(uname)" = "Linux" ]; then
    if [ -f "/etc/arch-release" ]; then
        arch-upgrade() {
            yay -Syu --sudoloop \
                --removemake \
                --devel \
                --nocleanmenu \
                --nodiffmenu \
                --noeditmenu \
                --noupgrademenu
            # try flatpak if exists
            flatpak update || true
            # try to upgrade cargo stuff
            cargo-update-binaries
            generate_completions
        }
        arch-clean() {
            yay -Sc --noconfirm
        }
    elif [ -f "/etc/debian_version" ]; then
        ubuntu-upgrade() {
            sudo apt update && \
            sudo apt upgrade -y && \
            sudo snap refresh
            # try flatpak if exists
            flatpak update || true
            # try to upgrade cargo stuff
            cargo-update-binaries
            generate_completions
        }
        ubuntu-clean() {
            sudo apt autoremove -y && \
            sudo apt clean
        }
	fi
fi
