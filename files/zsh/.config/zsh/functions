# ZSH paths to be used in functions
if [ "$(uname)" = "Darwin" ]; then
    export ZSH_VENDOR_COMPLETIONS="$BREW_PREFIX/share/zsh/site-functions"
elif [ "$(uname)" = "Linux" ]; then
	if [ -f "/etc/arch-release" ]; then
        export ZSH_VENDOR_COMPLETIONS='/usr/share/zsh/site-functions'
	elif [ -f "/etc/debian_version" ]; then
        export ZSH_VENDOR_COMPLETIONS='/usr/share/zsh/vendor-completions'
	fi
fi

zsh_add_file() {
    [ -f "$ZDOTDIR/$1" ] && source "$ZDOTDIR/$1"
}

zsh_add_plugin() {
    PLUGIN_NAME=$(echo $1 | cut -d "/" -f 2)
    if [ -d "$ZDOTDIR/remote/$PLUGIN_NAME" ]; then
        # For plugins
        zsh_add_file "remote/$PLUGIN_NAME/$PLUGIN_NAME.plugin.zsh" || \
        zsh_add_file "remote/$PLUGIN_NAME/$PLUGIN_NAME.zsh"
    else
        git clone --depth 1 "https://github.com/$1.git" "$ZDOTDIR/remote/$PLUGIN_NAME"
    fi
}

zfunc_completions_helper() {
    local generate_command="$1"
    local completions_filename="$2"
    local zfunc="$ZDOTDIR/zfunc"

    if [ ! -f $ZSH_VENDOR_COMPLETIONS/$completions_filename ]; then
        # keep || true in case some of these programs are not in path (fail gracefully)
        mkdir -p "$zfunc" \
        && (eval "$generate_command" > "${zfunc}/$completions_filename" || true)
    else
        # remove if exists locally because it is already provided by package manager
        rm -f "${zfunc}/$completions_filename"
    fi
}

weather() {
    local param="$1"
    if [ -z "$param" ]; then
        curl "wttr.in/?F"
    else
        curl "wttr.in/${param}?F"
    fi
}

timezsh() {
    local shell=${1-$SHELL}
    for i in $(seq 1 10); do time $shell -i -c exit; done
}

# fix for tmux ssh socket
fix_ssh_auth_sock() {
    # (On) reverses globbing order
    # https://unix.stackexchange.com/a/27400
    for tsock in /tmp/ssh*/agent*(On); do
        if [ -O "$tsock" ]; then
            sock=$tsock
            break
        fi
    done
    if [ -n "$sock" ]; then
        export SSH_AUTH_SOCK="$sock"
        echo "New socket: $sock"
    else
        echo "Could not find appropriate socket :("
        unset SSH_AUTH_SOCK
    fi
}

# update asdf and all plugins
asdf-update() {
    # actually we manage asdf via nix...
    #asdf update
    asdf plugin-update --all
}

# update nix
nix-update() {
    if [ "$(uname)" = "Darwin" ]; then
        darwin-rebuild switch --flake "git+file:///Users/konrad/Code/dotfiles#$(whoami)@$(hostname)"
    elif [ "$(uname)" = "Linux" ]; then
        # current user's home (flakes enabled)
        home-manager switch --flake "git+file:///home/konrad/Code/dotfiles#$(whoami)@$(hostname)"
        # system-wide
        sudo --login sh -c 'nix-channel --update; nix-env -iA nixpkgs.nix nixpkgs.cacert; systemctl daemon-reload; systemctl restart nix-daemon'
    fi
}

# clean nix
nix-clean() {
    if [ "$(uname)" = "Darwin" ]; then
        darwin-rebuild switch --flake "git+file:///Users/konrad/Code/dotfiles#$(whoami)@$(hostname)"
    elif [ "$(uname)" = "Linux" ]; then
        # home
        home-manager expire-generations '-14 days'
    fi
    # current user's profile (flakes enabled)
    nix profile wipe-history --older-than 14d
    # nix store garbage collection
    nix store gc
    # system-wide (goes into users as well)
    sudo --login sh -c 'nix-collect-garbage --delete-older-than 14d'
}

# update all cargo-installed binaries
cargo-update-binaries() {
    rustup update
    cargo install $(cargo install --list | grep -E '^[a-z0-9_-]+ v[0-9.]+:$' | cut -f1 -d' ')
}

# update functions
if [ "$(uname)" = "Darwin" ]; then
    mac-upgrade() {
        brew update \
        && brew upgrade \
        && brew upgrade --cask \
        && nix-update \
        && cargo-update-binaries \
        && asdf-update
    }
    mac-clean() {
        brew cleanup \
        && nix-clean
    }
elif [ "$(uname)" = "Linux" ]; then
    if [ -f "/etc/arch-release" ]; then
        arch-upgrade() {
            yay -Syu --sudoloop \
                --removemake \
                --devel \
                --nocleanmenu \
                --nodiffmenu \
                --noeditmenu \
                --noupgrademenu \
            && nix-update \
            && (flatpak update || true) \
            && cargo-update-binaries \
            && asdf-update
        }
        arch-clean() {
            yay -Sc --noconfirm \
            && nix-clean
        }
    elif [ -f "/etc/debian_version" ]; then
        ubuntu-upgrade() {
            sudo apt update \
            && sudo apt upgrade -y \
            && sudo snap refresh \
            && nix-update \
            && (flatpak update || true) \
            && cargo-update-binaries \
            && asdf-update
        }
        ubuntu-clean() {
            sudo apt autoremove -y \
            && sudo apt clean \
            && sudo $HOME/.local/bin/remove-old-snaps.sh \
            && nix-clean
        }
	fi
fi
